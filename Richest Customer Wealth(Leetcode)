// ************************************************************************

You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank. Return the wealth that the richest customer has.

A customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.

class Solution {
public:
    int maximumWealth(vector<vector<int>>& accounts) {
        int n=accounts.size();
        int sum,ans=0;
        for(int i=0;i<n;i++)
        {
            sum=0;
            for(int j=0;j<accounts[i].size();j++)
            {
                sum=sum+accounts[i][j];
            }
            if(sum>ans)
            {
                ans=sum;
            }
        }
        return ans;
    }
};

// ****************************************************************************

another method 

#include <vector>
#include <numeric>  // for accumulate
using namespace std;

class Solution {
public:
    int maximumWealth(vector<vector<int>>& accounts) {
        int maxWealth = 0;

        for (const auto& customerAccounts : accounts) {
            int customerWealth = accumulate(customerAccounts.begin(), customerAccounts.end(), 0);
            maxWealth = max(maxWealth, customerWealth);
        }

        return maxWealth;
    }
};



